# This is a basic workflow to help you get started with Actions

name: CI
env:
  BUCKET_NAME : "neha-bucket123"
  APP_NAME : "neha-app"
  ENV_NAME : "Nehaapp-env"
  PACKAGE_NAME : "neha-${{ github.sha }}.zip"
  AWS_REGION : "us-east-2"

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  my-cicd-pipeline:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      #- name: Create zip
       # run: zip -r ${{ env.PACKAGE_NAME }} ./ -x "*.git"
        
      # Get ID token
      - name: get ID token
        run: |
          echo ::set-output name=IDTOKEN::$(aws cognito-idp initiate-auth --auth-flow 'USER_PASSWORD_AUTH' --client-id '2csis9vpibrffndsa18i4lnbif' --auth-parameters USERNAME='neha',PASSWORD='Pass#word3' --query AuthenticationResult.IdToken --output text)
        id: tokenid
      
      # Get credentials
      - name: get temp credentials
        run: echo ::set-output name=CREDENTIALS::$(aws sts assume-role-with-web-identity  --role-arn 'arn:aws:iam::151347512159:role/TestOIDCRole' --role-session-name 'samplerolesession' --web-identity-token ${{ steps.tokenid.outputs.IDTOKEN }} --query Credentials)
        id: credentials
        
      - name: get access ID
        run: echo "'AccessKeyId':'ASIASGPIDYNP7S6D5V6L' | jq -rc '.AccessKeyId'"
        id: accessid
      # Runs a set of commands using the runners shell
#      - name: configure aws credentials
 #       uses: aws-actions/configure-aws-credentials@v1
  #      with:
   #       aws-access-key-id: ${{ steps.credentials.outputs.CREDENTIALS.AccessKeyId }}
    #      aws-secret-access-key: ${{ steps.credentials.outputs.CREDENTIALS.SecretAccessKey }}
     #     aws-session-token: ${{ steps.credentials.outputs.CREDENTIALS.SessionToken }}
      #    aws-region: ${{ env.AWS_REGION }}

          

      #- name:  Copy package to s3

       # run: aws s3 cp ${{ env.PACKAGE_NAME }} s3://${{ env.BUCKET_NAME }}/


 
      - name: Print nice message on completion of CD Pipeline
        run : echo "CD Pipeline part finished successfully ${{ steps.accessid.outputs.ACCESSID }}  "
    

